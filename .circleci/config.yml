version: 2.1

orbs:
  gor: hubci/goreleaser@1.0
  osd: circleci/os-detect@0.3.0

executors:
  linux-docker:
    docker:
      - image: cimg/base:2021.07
  linux-amd64:
    machine:
      image: ubuntu-2004:202107-02
  linux-arm64:
    machine:
      image: ubuntu-2004:202107-01
    resource_class: arm.medium
  macos:
    macos:
      xcode: 13.0.0
  windows:
    machine:
      image: windows-server-2019-vs2019:stable
      resource_class: windows.medium

workflows:
  main:
    jobs:
      - test
      - gor/release:
          version: "0.176.0"
          go-version: "1.17"
          dry-run: true
          post-steps:
            - persist_to_workspace:
                root: "."
                paths:
                  - "dist"
      - test-with-images:
          requires:
            - gor/release
          matrix:
            parameters:
              image:
                - linux-docker
                - linux-amd64
                - linux-arm64
                - macos
                #- windows
      - functional-tests:
          requires:
            - gor/release
  release:
    jobs:
      - test:
          filters:
            branches:
              ignore: /.*/
            tags:
              # Simplified SemVer regex
              only: /^v\d+\.\d+\.\d+$/
      - gor/release:
          version: "0.176.0"
          go-version: "1.17"
          filters:
            branches:
              ignore: /.*/
            tags:
              # Simplified SemVer regex
              only: /^v\d+\.\d+\.\d+$/
          post-steps:
            - persist_to_workspace:
                root: "."
                paths:
                  - "dist"
          context: main

jobs:
  test:
    docker:
      - image: cimg/go:1.17
    environment:
      GOTESTSUM_JUNITFILE: "junit/unit-tests.xml"
    steps:
      - checkout
      - restore_cache:
          keys:
            - go-mod-v2-{{ checksum "go.sum" }}
      - run:
          name: "Download Dependancies"
          command: cd sonar && go mod download
      - run:
          name: "Run Tests & Coverage"
          command: |
            cd ./sonar
            mkdir junit
            gotestsum -- -coverprofile=coverage.txt -covermode=atomic ./...
            bash <(curl -s https://codecov.io/bash)
      - store_test_results:
          path: junit
      - store_artifacts:
          path: junit/unit-tests.xml
      - run:
          name: "Upload to Codecov"
          command: cd sonar && bash <(curl -s https://codecov.io/bash)
      - save_cache:
          key: go-mod-v2-{{ checksum "go.sum" }}
          paths:
            - "/home/circleci/.cache/go-build"
  test-with-images:
    parameters:
      image:
        type: executor
    executor: <<parameters.image>>
    steps:
      - osd/init
      - attach_workspace:
          at: .
      - run: |
          if [ $OSD_FAMILY == "linux" ]; then
            ./dist/sonar_linux_$(dpkg --print-architecture)/sonar version
          else
            ./dist/sonar_darwin_amd64/sonar version
          fi
  functional-tests:
    executor: linux-amd64
    steps:
      - attach_workspace:
          at: .
      - run: |
          mv ./dist/sonar_linux_amd64/sonar ~/bin/

          output=$(sonar images list ftechtest)

          if ! echo $output | grep -q "ubuntu"; then
            echo "Error: When running 'sonar images list ftechtest', the 'ubuntu' image is missing."
            echo ""
            echo "Here's the output:"
            echo ""
            echo "====="
            echo $output
            echo "====="
            echo ""
            exit 1
          fi

          if ! echo $output | grep -q "dummy"; then
            echo "Error: When running 'sonar images list ftechtest', the 'dummy' image is missing."
            echo ""
            echo "Here's the output:"
            echo ""
            echo "====="
            echo $output
            echo "====="
            echo ""
            exit 1
          fi

          output=$(sonar packages list ftechtest/apt:2020.01.21)

          if ! echo $output | grep -q "cowsay"; then
            echo "Error: When running 'sonar packages list ftechtest/apt:2020.01.21', the 'cowsay' package is missing."
            echo ""
            echo "Here's the output:"
            echo ""
            echo "====="
            echo $output
            echo "====="
            echo ""
            exit 1
          fi
